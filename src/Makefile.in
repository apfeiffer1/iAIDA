
AIDA_INC  = -I@AIDA_INC_DIR@ 
BOOST_INC = -I@BOOST_INC_DIR@ -I../@BOOST_INC_DIR@

EXPAT_DIR = @EXPAT_DIR@
EXPAT_INC = -I${EXPAT_DIR}/include -I../${EXPAT_DIR}/include
EXPAT_LIB_DIR = @EXPAT_LIB_DIR@

ZLIB_DIR = @ZLIB_DIR@
ZLIB_INC = -I${ZLIB_DIR}/include -I../${ZLIB_DIR}/include

UUID_DIR = @UUID_DIR@
UUID_INC = -I${UUID_DIR}/include -I../${UUID_DIR}/include

HAVE_GRACE = @HAVE_GRACE@
GRACE_DIR = @GRACE_DIR@
GRACE_INC = -I${GRACE_DIR}/include -I../${GRACE_DIR}/include

HAVE_ROOT = @HAVE_ROOT@
ROOT_DIR = @ROOT_DIR@
ROOT_INC = -I`ROOTSYS=${ROOT_DIR} ${ROOT_DIR}/bin/root-config --incdir`

HAVE_CERN = @HAVE_CERN@
CERN_DIR = @CERN_DIR@
CERN_ROOT = @CERN_DIR@
CERN_INC = -I${CERN_DIR}/include -I../${CERN_DIR}/include

HAVEF77 = @HAVEF77@
HAVEGFOR = @HAVEGFOR@
GFOR_LIB_PATH = @GFORLIBPATH@

INCLUDES = ${AIDA_INC} ${BOOST_INC} ${EXPAT_INC} ${ZLIB_INC} ${UUID_INC} -I../include -I.. -I.

# set-up OS specific items
OS=$(shell uname)
ifeq (${OS}, Linux)
  ARCH=$(shell uname -m)
  GRACE_LIB = -L${GRACE_DIR}/lib -lgrace_np
  CXX = g++
  OBJEXT =o
  SHLIB=${CXX} -o 
  SHLIBEXT =so
  ARLIBEXT =a
  CXX_FLAGS = -fPIC -pthread -g -DBADENDS
  LDFLAGS = ${LIB64} -ldl
  SHLIBFLAGS = -shared
  ifeq (${ARCH}, x86_64)
    LIB64 = -L/usr/lib64
    LIBS = -L${EXPAT_LIB_DIR}  -L${ZLIB_DIR}/lib64 ${LIB64} -lexpat -lz
  else
    LIBS = -L${EXPAT_LIB_DIR}  -L${ZLIB_DIR}/lib ${LIB64} -lexpat -lz
  endif
  INSTALL_CMD=cp
endif
ifeq (${OS}, Darwin)
  GRACE_LIB = -L${GRACE_DIR}/lib -lgrace_np
  CXX = g++
  OBJEXT =o
  SHLIB=${CXX} -o 
  SHLIBEXT =dylib
  ARLIBEXT =a
  CXX_FLAGS = -fPIC -g -DBADENDS 
  LDFLAGS = -lm -lc
  export MACOSX_DEPLOYMENT_TARGET=10.5
  SHLIBFLAGS = -dynamiclib -single_module -undefined dynamic_lookup
  LIBS = -L${EXPAT_DIR}/lib  -lexpat -L${ZLIB_DIR}/lib 
  INSTALL_CMD=cp
endif
ifeq (${OS}, CYGWIN_NT-5.1)
  GRACE_LIB = -L${GRACE_DIR}/lib/libgrace_np.lib
  INCLUDES += -Ic:/Program\ Files/Microsoft\ Visual\ Studio\ .NET\ 2003/Vc7/PlatformSDK/Include
  CXX = cl
  CPP=cl
  CC=cl
  OBJEXT =obj
  SHLIBEXT =lib
  ARLIBEXT =a
  SHLIB=lib /nologo /OUT:
  CXX_FLAGS = -EHsc -GR -GX -MD -nologo
  SHLIBFLAGS = 
  LDFLAGS = 
  LIBS = ${ZLIB_DIR}/lib/zlib.lib ${EXPAT_DIR}/Libs/libexpat.lib ${UUID_DIR}/lib/uuid.lib
  INSTALL_CMD=copy
endif

SRCS := $(wildcard *.cpp)
OBJS = ${SRCS:.cpp=.${OBJEXT}}

# now all the vars are prepared, now check if we have Grace ...

ifdef HAVE_GRACE
CXX_FLAGS += -DHAVE_GRACE
SRCS     += $(wildcard AIDAGracePlotter/*.cpp)
INCLUDES += ${GRACE_INC}
LIBS     += ${GRACE_LIB} 
endif

ifdef HAVE_ROOT
CXX_FLAGS += -DHAVE_ROOT
SRCS     += $(wildcard AIDA_ROOT/*.cpp)
INCLUDES += ${ROOT_INC}
LIBS     += `ROOTSYS=${ROOT_DIR} ${ROOT_DIR}/bin/root-config --libs`
else  # root has it's own version of libz, so don't use the system one
ifeq (${OS}, Darwin)
  LIBS += -lz 
endif
endif


ifdef HAVE_CERN
CXX_FLAGS += -DHAVE_CERN
SRCS     += $(wildcard AIDA_HBook/*.cpp)
F_SRCS    = $(wildcard AIDA_HBook/*.F)
OBJS     += ${F_SRCS:.F=.${OBJEXT}}
CERN_BASE = $(shell dirname ${CERN_DIR} )
CERN_LVL  = $(shell basename ${CERN_DIR}  )
CERN_LIB  = $(shell CERN=${CERN_BASE} CERN_LEVEL=${CERN_LVL} ${CERN_DIR}/bin/cernlib packlib)
LIBS     += -Bstatic ${CERN_LIB} -Bdynamic
 ifdef HAVEF77
   LIBS += -lg2c
  else
   ifdef HAVEGFOR 
    FC = gfortran
    LIBS += -L${GFOR_LIB_PATH} -lgfortran 
   endif
  endif
  # on Mac, the cernlib from fink needs lg2c ...
  # also on other systems ... so add this unconditionally
  ifeq (${OS}, Darwin)
    LIBS += -lg2c  
  endif
endif

all: lib

clean:
	@echo "Cleaning in src"
	@rm -f *.${OBJEXT} libiAIDA.${SHLIBEXT} *.lreg AIDA_HBook/*.${OBJEXT} AIDA_ROOT/*.${OBJEXT} lib

lib: ${OBJS}
	${SHLIB}libiAIDA.${SHLIBEXT} ${SHLIBFLAGS} ${LDFLAGS} ${CXX_FLAGS} ${CXXFLAGS} ${INCLUDES} ${OBJS} ${LIBS} 
	@test -e ../lib || mkdir -p ../lib
	@mv libiAIDA.${SHLIBEXT} ../lib/.
	ar -r ../lib/libiAIDA.${ARLIBEXT} ${OBJS}
	@touch lib

install: lib
	test -e @PREFIX_DIR@/lib || mkdir -p @PREFIX_DIR@/lib 
	${INSTALL_CMD} ../lib/libiAIDA.${SHLIBEXT} @PREFIX_DIR@/lib/
	${INSTALL_CMD} ../lib/libiAIDA.${ARLIBEXT} @PREFIX_DIR@/lib/

%.${OBJEXT}: %.cpp
	${CXX} ${CXX_FLAGS} ${CXXFLAGS} ${INCLUDES} -c $< -o $@

AIDA_HBook/%.${OBJEXT}: AIDA_HBook/%.F
	${FC} ${CXX_FLAGS} ${FFLAGS}  -c $< -o $@
