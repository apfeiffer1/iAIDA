#
#    Copyright 2007 Andreas Pfeiffer
#
#
#  This file is part of iAIDA.
#
#  iAIDA is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as 
#  published by the Free Software Foundation, either version 3 of 
#  the License.
#
#  iAIDA is distributed in the hope that it will be useful, but 
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public 
#  License along with iAIDA.  If not, see <http://www.gnu.org/licenses/>.
#

AIDA_INC = -I@AIDA_INC_DIR@ 
BOOST_INC = -I@BOOST_INC_DIR@
EXPAT_INC = -I@EXPAT_INC_DIR@
EXPAT_LIB = -L@EXPAT_LIB_DIR@

HAVE_GRACE = @HAVE_GRACE@
GRACE_INC = -I@GRACE_INC_DIR@
GRACE_LIB = -L@GRACE_LIB_DIR@ -lgrace_np

HAVE_ROOT = @HAVE_ROOT@
ROOT_LIBS = @ROOT_LIBS@

HAVE_CERN = @HAVE_CERN@
CERN_DIR = @CERN_DIR@

HAVEF77 = @HAVEF77@
HAVEGFOR = @HAVEGFOR@


INCLUDES = ${AIDA_INC} ${BOOST_INC} ${EXPAT_INC} -I../include -I.. -I.

LIBS = ${EXPAT_LIB} 

INCLUDES = ${AIDA_INC} ${BOOST_INC} -I../include

LIBS += -L../lib -liAIDA 

SRCS = \
	exaH1.cpp \
	exaH2.cpp \
	exaH3.cpp \
	exaTree.cpp 

OS=$(shell uname)

ifeq (${OS}, Linux)
  ARCH=$(shell uname -m)
  ifeq (${ARCH}, x86_64)
    LIB64 = -L/usr/lib64
  endif
  CXX = g++
  OBJEXT=o
  SHLIBEXT=so
  CXX_FLAGS += -fPIC -pthread -g 
  SHLIBFLAGS = -shared
  LDFLAGS = -pthread -ldl
  LIBS +=  ${LIB64}  -lexpat -lz 
endif
ifeq (${OS}, Darwin)
  CXX = g++
  OBJEXT=o
  SHLIBEXT=dylib
  CXX_FLAGS += -fPIC -g 
  export MACOSX_DEPLOYMENT_TARGET=10.4
  SHLIBFLAGS = -dynamiclib -single_module -undefined dynamic_lookup
  LDFLAGS = -lssl -bind_at_load
  LIBS +=  -lexpat -ldl
endif

# now all the vars are prepared, now check if we have Grace ...

ifdef HAVE_GRACE
CXX_FLAGS += -DHAVE_GRACE
SRCS     += 
INCLUDES += ${GRACE_INC}
LIBS     += ${GRACE_LIB} 
endif

ifdef HAVE_ROOT
ROOT_DIR = @ROOT_DIR@
SRCS     += storeRoot.cpp readRoot.cpp storeRootTup.cpp readRootTup.cpp 
LIBS     += ${ROOT_LIBS}
else  # root has it's own version of libz, so don't use the system one
ifeq (${OS}, Darwin)
  LIBS += -lz 
endif
endif

ifdef HAVE_CERN
SRCS     += storeHbk.cpp readHbk.cpp storeHbkTup.cpp readHbkTup.cpp 
CERN_LIB = `${CERN_DIR}/bin/cernlib`
LIBS     += -Bstatic ${CERN_LIB} -Bdynamic
 ifdef HAVEF77
   LIBS += -lg2c
  else
   ifdef HAVEGFOR 
    FC = gfortran
    LIBS += -lgfortran 
   endif
  endif
  # on Mac, the cernlib from fink needs lg2c ...
  ifeq (${OS}, Darwin)
    LIBS += -lg2c  
  endif
endif

OBJS = ${SRCS:.cpp=.o}
EXECS = ${SRCS:.cpp=}

all: ${EXECS}

clean:
	rm -f ${OBJS} ${EXECS}

run:
	export DYLD_LIBRARY_PATH=../src:${DYLD_LIBRARY_PATH} ; \
	export LD_LIBRARY_PATH=../src:${LD_LIBRARY_PATH} ; \
	for e in ${EXECS} ; do echo "running "$$e ; ./$$e ; done ; \
	rm -f exa*.aida exa*.hbk 


%.o : %.cpp
	${CXX} ${CXX_FLAGS} ${CXXFLAGS} ${INCLUDES} -c $< -o $@.${OBJEXT}

% : %.cpp
	${CXX} ${CXX_FLAGS} ${CXXFLAGS} ${INCLUDES} -c $< -o $@.${OBJEXT}
	${CXX} ${CXX_FLAGS} ${CXXFLAGS} $@.${OBJEXT} ${INCLUDES} ${LIBS} ${LDFLAGS} -o $@

