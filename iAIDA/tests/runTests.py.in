#!/usr/bin/env python

#
#    Copyright 2007 Andreas Pfeiffer
#
#
#  This file is part of iAIDA.
#
#  iAIDA is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as 
#  published by the Free Software Foundation, either version 3 of 
#  the License.
#
#  iAIDA is distributed in the hope that it will be useful, but 
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public 
#  License along with iAIDA.  If not, see <http://www.gnu.org/licenses/>.
#

#########################################################
#
# Warning: this python file is generated from the .py.in file here
#          DO NOT EDIT -- any change will be lost at the next "configure" call !!!
# 
#########################################################


import sys, os

class iAIDATester(object):

    def __init__(self):

        newPath = '@PREFIX_DIR@/bin:'+os.environ['PATH']
        os.environ['PATH'] = newPath
        
        self.tstDir = os.path.normpath( os.path.dirname( os.path.normpath(sys.argv[0]) ) )

        self.examples = ['exaH1', 'exaH2', 'exaH3', 'exaTree', 'exaTreeReader', 'exaTuple', 'exaTupleRead',
                         'storeRoot', 'readRoot', 'storeRootTup', 'readRootTup',
                         'storeHbk', 'readHbk', 'storeHbkTup', 'readHbkTup', 'storeHbkCWN', 'readHbkCWN',
                         'convertTupleToCSV'
                         ]

        self.tests    = ['testAIDAmem',
                         'testHistoName',
                         'plottingHistograms']

        self.testArgs = { 'convertTupleToCSV' : 'exatup.aida xml 100' } 

        self.results  = { 'ok'     : 0,
                          'fail'   : 0,
                          'ignore' : 0}
        return
    
    def doRun(self, entry):

        print "in ", os.getcwd(), ":",

        logFile = entry+'.log'
        cmd = "eval `../bin/aida-config --run sh`; "
        cmd += 'echo "" | ./'+entry+' >'+logFile+' 2>&1 3>&1 '

        ret = 0
        if os.path.exists(entry):
            if self.testArgs.has_key(entry) : cmd += ' '+self.testArgs[entry]
            ret = os.system(cmd)
            if ret == 0:
                if self.testArgs.has_key(entry) : 
                    print entry, self.testArgs[entry], " ... OK"
                else: 
                    print entry, " ... OK"
                os.system('rm '+logFile)
                self.results['ok'] += 1
            else:
                print entry, " ... FAILED ("+str(ret)+", for more info see:"+logFile+")"
                self.results['fail'] += 1
        else:
            print entry, '... not build, ignored for tests'
            self.results['ignore'] += 1

        return

    def testAll(self):

        startDir = os.getcwd()

        os.chdir( os.path.join(self.tstDir,"../examples") )
        for entry in self.examples:
            self.doRun(entry)

        os.chdir(startDir)
        os.chdir( os.path.join(self.tstDir,"../tests") )
        for entry in self.tests:
            self.doRun(entry)

        print "\nResults of testing: "
        print "   ",self.results['ok'], 'tests OK'
        print "   ",self.results['fail'], 'tests FAILED'
        print "   ",self.results['ignore'], 'tests SKIPPED'
    
        return

if __name__ == "__main__" :

    tester = iAIDATester()
    tester.testAll()
