#!/usr/bin/env python

import sys, os

class iAIDATester(object):

    def __init__(self):

        newPath = '@PREFIX_DIR@/bin:'+os.environ['PATH']
        os.environ['PATH'] = newPath
        
        self.tstDir = os.path.normpath( os.path.dirname( os.path.normpath(sys.argv[0]) ) )

        self.examples = ['exaH1', 'exaH2', 'exaH3', 'exaTree',
                         'storeHbk', 'readHbk', 'storeHbkTup', 'readHbkTup']
        self.tests    = ['testAIDAmem',
                         'plottingHistograms']

        self.results  = { 'ok'     : 0,
                          'fail'   : 0,
                          'ignore' : 0}
        return
    
    def doRun(self, entry):

        print "in ", os.getcwd(), ":",

        logFile = entry+'.log'
        cmd = "eval `aida-config --run sh`; "
        cmd += './'+entry+' >'+logFile+' 2>&1 3>&1 '

        ret = 0
        if os.path.exists(entry):
            ret = os.system(cmd)
            if ret == 0:
                print entry, " ... OK"
                os.system('rm '+logFile)
                self.results['ok'] += 1
            else:
                print entry, " ... FAILED ("+str(ret)+", for more info see:"+logFile+")"
                self.results['fail'] += 1
        else:
            print entry, '... not build, ignored for tests'
            self.results['ignore'] += 1

        return

    def testAll(self):

        startDir = os.getcwd()

        os.chdir( os.path.join(self.tstDir,"../examples") )
        for entry in self.examples:
            self.doRun(entry)

        os.chdir(startDir)
        os.chdir( os.path.join(self.tstDir,"../tests") )
        for entry in self.tests:
            self.doRun(entry)

        print "\nResults of testing: "
        print "   ",self.results['ok'], 'tests OK'
        print "   ",self.results['fail'], 'tests FAILED'
        print "   ",self.results['ignore'], 'tests SKIPPED'
    
        return

if __name__ == "__main__" :

    tester = iAIDATester()
    tester.testAll()
