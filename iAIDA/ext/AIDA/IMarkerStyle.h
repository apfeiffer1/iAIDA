// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDA_IMARKERSTYLE_H
#define AIDA_IMARKERSTYLE_H 1

//  This file is part of the AIDA library
//  Copyright (C) 2002 by the AIDA team.  All rights reserved.
//  This library is free software and under the terms of the
//  GNU Library General Public License described in the LGPL.txt 

#include <string>
#include <vector>

#include "AIDA/IBrushStyle.h"

namespace AIDA {

/**
 * Style for all markers (histo representation, legend box etc.)
 *
 * @author The AIDA team (http://aida.freehep.org/)
 */

class IMarkerStyle : virtual public IBrushStyle {

public: 
    /// Destructor.
    virtual ~IMarkerStyle() { /* nop */; }

  /**
   * Get list of shapes available in this implementation.
   */
    virtual std::vector<std::string>  availableShapes() const = 0;

  /**
   * Get current marker shape.
   */
    virtual std::string shape() const = 0;

  /**
   * Set current marker shape, e.g. "openCircle". 
   * @return false if shape not available in this implementation.
   */
    virtual bool setShape(const std::string & shape) = 0;
}; // class
} // namespace AIDA
#endif /* ifndef AIDA_IMARKERSTYLE_H */
