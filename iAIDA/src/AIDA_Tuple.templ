// Emacs -*- C++ -*-

template< class T > bool
iAIDA::AIDA_Tuple_native::AIDA_Tuple::fillChecked( int column, T value ) {
  void * p = m_store->variableAddress( m_header, column );
  if ( !p ) return false;
  T* tp = reinterpret_cast<T*>( p );
  *tp = value;
  return true;
}


template< class T > const T*
iAIDA::AIDA_Tuple_native::AIDA_Tuple::getVariable( int column ) const {
  const AIDA::Dev::IBackingStore* pstore = m_store;
  const void* p = pstore->variableAddress( m_header, column );
  if ( !p ) return 0;
  return reinterpret_cast<const T*>( p );
}


template< class T > T*
iAIDA::AIDA_Tuple_native::AIDA_Tuple::getVariable( int column ) {
  void* p = m_store->variableAddress( m_header, column );
  if ( !p ) return 0;
  return reinterpret_cast<T*>( p );
}
