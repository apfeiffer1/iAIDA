//
//    Copyright 2007 Andreas Pfeiffer
//
/*
 *  This file is part of iAIDA.
 *
 *  iAIDA is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of 
 *  the License.
 *
 *  iAIDA is distributed in the hope that it will be useful, but 
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public 
 *  License along with iAIDA.  If not, see <http://www.gnu.org/licenses/>.
 */

// Emacs -*- C++ -*-

template< class T > bool
iAIDA::AIDA_Tuple_native::AIDA_Tuple::fillChecked( int column, T value ) {
  void * p = m_store->variableAddress( m_header, column );
  if ( !p ) return false;
  T* tp = reinterpret_cast<T*>( p );
  *tp = value;
  return true;
}


template< class T > const T*
iAIDA::AIDA_Tuple_native::AIDA_Tuple::getVariable( int column ) const {
  const AIDA::Dev::IBackingStore* pstore = m_store;
  const void* p = pstore->variableAddress( m_header, column );
  if ( !p ) return 0;
  return reinterpret_cast<const T*>( p );
}


template< class T > T*
iAIDA::AIDA_Tuple_native::AIDA_Tuple::getVariable( int column ) {
  void* p = m_store->variableAddress( m_header, column );
  if ( !p ) return 0;
  return reinterpret_cast<T*>( p );
}
