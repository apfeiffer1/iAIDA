// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDA_Dev_IDEVFUNCTIONCATALOG_H
#define AIDA_Dev_IDEVFUNCTIONCATALOG_H 1

#include <string>

#include "AIDA/IFunction.h"
#include "AIDA/IFunctionCatalog.h"

namespace AIDA {
namespace Dev {

/** @interface IDevFunctionCatalog
 *
 * Developer interface for function catalog.
 *
 * @author Jakub Moscicki, Max Turri, Victor Serbo
 * @author Andreas Pfeiffer, Max Sang, Tony Johnson, Lorenzo Moneta
 *
 * @stereotype developer
 */

class IDevFunctionCatalog : virtual public AIDA::IFunctionCatalog {

public: 
    /// Destructor.
    virtual ~IDevFunctionCatalog() { /* nop */; }

    /**
     * Load implementation of a model function from a persistent storage
     * and create a new object.
     *
     * Look-up for the proper shared library with the code for the function
     * and load if not already loaded.
     *
     * This is much more that a simple factory method and in fact is a part of
     * developper interface - user can use createFunctionByName from
     * IFunctionFactory.
     */
    virtual AIDA::IFunction * create(std::string name) = 0;
}; // class
} // namespace Dev
} // namespace AIDA
#endif /* ifndef AIDA_Dev_IDEVFUNCTIONCATALOG_H */
